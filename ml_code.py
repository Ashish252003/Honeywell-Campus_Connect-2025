# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DlVN4Tf2Z6PBpam9Te3yzyRdg5hE4fw5
"""

!pip install scikit-learn openpyxl xlsxwriter matplotlib pandas plotly

from google.colab import files
import pandas as pd

print(" Welcome! Letâ€™s run a Food & Beverage anomaly check.")
print("Please upload your process dataset (CSV)...")
uploaded = files.upload()
csv_path = list(uploaded.keys())[0]
df = pd.read_csv(csv_path)
print(f" Loaded {csv_path} with {df.shape[0]} rows and {df.shape[1]} columns.")

import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import IsolationForest

drop_like = {"Batch ID","BatchID","batch_id","Operator","Notes","Operator Notes",
             "Equipment ID/Model","equipment_id","id","ID"}
X = df.drop(columns=[c for c in df.columns if c in drop_like], errors="ignore")

numeric_cols = [c for c in X.columns if pd.api.types.is_numeric_dtype(X[c])]
categorical_cols = [c for c in X.columns if not pd.api.types.is_numeric_dtype(X[c])]

preprocess = ColumnTransformer([
    ("num", Pipeline([
        ("imputer", SimpleImputer(strategy="median")),
        ("scaler", StandardScaler())
    ]), numeric_cols),
    ("cat", Pipeline([
        ("imputer", SimpleImputer(strategy="most_frequent")),
        ("onehot", OneHotEncoder(handle_unknown="ignore"))
    ]), categorical_cols)
])

model = Pipeline([
    ("preprocess", preprocess),
    ("iso", IsolationForest(contamination=0.08, random_state=42))
])
model.fit(X)

Z = model.named_steps["preprocess"].transform(X)
scores = -model.named_steps["iso"].score_samples(Z)
flags = (model.named_steps["iso"].predict(Z) == -1).astype(int)

df["Anomaly_Flag"] = flags
df["Anomaly_Score"] = scores

print(f"\nðŸ”Ž Analysis complete! Found {flags.sum()} anomalies out of {len(flags)} "
      f"({round(flags.mean()*100,2)} % of total records).")

equip_col = None
for c in df.columns:
    if "equip" in c.lower() or "machine" in c.lower() or "line" in c.lower():
        equip_col = c
        break

equip_summary = None
if equip_col:
    equip_summary = (
        df.groupby(equip_col)
          .agg(total=("Anomaly_Flag","count"),
               anomalies=("Anomaly_Flag","sum"))
    )
    equip_summary["Anomaly_Rate"] = equip_summary["anomalies"]/equip_summary["total"]
    equip_summary = equip_summary.sort_values("Anomaly_Rate", ascending=False)
    print("\n Equipment-level anomaly snapshot:")
    display(equip_summary)

out_file = "Anomaly_Dashboard.xlsx"
with pd.ExcelWriter(out_file, engine="xlsxwriter") as writer:
    workbook  = writer.book

    top_anomalies = df[df["Anomaly_Flag"]==1].sort_values("Anomaly_Score", ascending=False)
    top_anomalies.to_excel(writer, sheet_name="Top_Anomalies", index=False)
    ws1 = writer.sheets["Top_Anomalies"]
    fmt_header = workbook.add_format({'bold': True, 'bg_color': '#D7E4BC'})
    ws1.set_row(0, None, fmt_header)
    max_row = len(top_anomalies)+1
    score_col = top_anomalies.columns.get_loc("Anomaly_Score")
    ws1.conditional_format(1, score_col, max_row, score_col,
                           {"type":"3_color_scale", "min_color":"#63BE7B",
                            "mid_color":"#FFEB84", "max_color":"#F8696B"})

    if equip_summary is not None:
        equip_summary.to_excel(writer, sheet_name="Equipment_Summary")
        ws2 = writer.sheets["Equipment_Summary"]
        ws2.set_row(0, None, fmt_header)

        chart = workbook.add_chart({'type': 'column'})
        chart.add_series({
            'name': 'Anomaly Rate',
            'categories': ['Equipment_Summary', 1, 0, len(equip_summary), 0],
            'values':     ['Equipment_Summary', 1, 3, len(equip_summary), 3],
            'fill':       {'color': '#FF6666'}
        })
        chart.set_title({'name': 'Anomaly Rate by Equipment'})
        chart.set_x_axis({'name': 'Equipment'})
        chart.set_y_axis({'name': 'Rate'})
        ws2.insert_chart("E2", chart)

    insights = writer.book.add_worksheet("Insights")
    insights.write(0,0," Hackathon Insights Report", workbook.add_format({'bold':True,'font_size':14}))
    insights.write(2,0,f"Total rows: {len(df)}")
    insights.write(3,0,f"Total anomalies: {flags.sum()} ({round(flags.mean()*100,2)}%)")

    row = 5
    if equip_summary is not None:
        for eq, r in equip_summary.iterrows():
            if r["Anomaly_Rate"] > 0.10:
                insights.write(row,0,f" ALERT: {eq} shows HIGH anomaly rate ({r['Anomaly_Rate']:.1%})", workbook.add_format({'bold':True,'font_color':'red'}))
                row+=1
        if row==5:
            insights.write(row,0," All equipment within safe anomaly levels.", workbook.add_format({'font_color':'green'}))

print(f" Excel Dashboard ready: {out_file}")

import plotly.express as px
if equip_summary is not None:
    fig = px.bar(equip_summary, x=equip_summary.index, y="Anomaly_Rate",
                 title="Interactive Anomaly Rate by Equipment",
                 color="Anomaly_Rate", color_continuous_scale="Reds")
    fig.show()

from google.colab import files
files.download(out_file)